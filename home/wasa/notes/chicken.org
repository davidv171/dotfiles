* Build system and packaging work

- =chicken= is using a positional argument for the file name... (note
  the confusing error message when you try specifying an option first)
- Missing LICENSE in egg tarballs
- Implement an option for =chicken-install= to not fetch/install any
  dependencies
- http://code.call-cc.org/egg-tarballs/ should be official (see
  http://www.more-magic.net/posts/vcs-independent-distribution.html
  for details)
- Same goes for
  http://code.call-cc.org/cgi-bin/gitweb.cgi?p=chicken-core.git;a=tree;hb=HEAD
- Source links in the wiki (svnwiki hacking?)
- Do something against the hardcoded locations (having a globally
  installed CHICKEN and locally installed libraries doesn't mix as
  they're looked up in the global location unless you use environment
  variables, perhaps an approach Ã  la =pip install --user= or =gem=
  and its user option could work)
- Eggs using =setup-helper= (like, =posix-utils=) are considered
  broken (as it's going for the =(include ...)= approach instead of
  the recommended =(use ...)=) and would need to be fixed before
  someone attempts packaging it as make dependency!
- Use =<chicken/chicken.h>= in generated sources

#+BEGIN_SRC
<Earnestly> wasamasa: All chicken needs is the ability for -p to be an actual prefix and an install location
<Earnestly> wasamasa: So `chicken-install -p /usr "$pkgdir"` for example
#+END_SRC

* =chicken-src=

The equivalent to =chicken-doc= for (definition) source lookup.

It should use chicken-install to retrieve eggs to a source location
and be able to find definitions in both scheme and C sources of these
retrieved eggs.  Additionally to that it would be nice to have an
updating command and integration into the REPL.

See also henrietta-cache: https://wiki.call-cc.org/running-an-egg-mirror

Perhaps it's sufficient to add an option to that utility for fetching
the last n revisions (and cleaning older releases!), then one could
just run it periodically and maybe offer a tarball of it on a mirror...

http://wiki.call-cc.org/chicken-projects/egg-index-4.html
http://code.call-cc.org/svn/chicken-eggs/release/4/ (anonymous svn)
http://code.call-cc.org/svn/chicken-eggs/release/4/egg-locations
http://code.call-cc.org/release-info?egg=loop
http://www.more-magic.net/posts/vcs-independent-distribution.html
http://wiki.call-cc.org/chicken-projects/egg-rss-feed-5.xml

#+BEGIN_SRC
<C-Keen> wasamasa:  (toplevel-command 'doc (lambda () (repl-doc-dwim (read)))
<C-Keen>                     ",doc PATHSPEC     Describe identifier or path with chicken-doc"))
#+END_SRC

* =moped=

A better MPD library!

* =doodle2=

[[http://wiki.call-cc.org/eggref/4/doodle][doodle]], but with [[http://libsdl.org/][SDL2]] (as it has numerous benefits, including the
windows behaving more like other toolkit windows with resizing and
whatnot).

https://wiki.libsdl.org/MigrationGuide

* Lispy grep tool

Basically a less snazzy [[http://mlsec.org/joern/][joern]] which parses lispy languages (with
support for archives by using the great [[http://libarchive.org/][libarchive]]), uses a query
language (maybe graph-style or something simpler?) and doesn't require
a database server.

* Fuzzy matcher

That would be nice to have as basis for fuzzy completion inside Emacs,
though [[https://github.com/Fuco1/yafmp][yafmp]] might be good enough (as it is very new though it's still
got the classic plethora of C bugs...).

* Self-hosting [[http://wiki.call-cc.org/eggref/4/spock][spock]] and interpreter

#+BEGIN_SRC
<wasamasa> I've been looking at http://ceaude.twoticketsplease.de/js-lisps.html thanks to #scheme
<wasamasa> and was wondering whether spock got an interpreter by now
<DerGuteMoritz> wasamasa: doesn't look like it
<wasamasa> DerGuteMoritz: would it be a worthwhile goal to pursue?
<DerGuteMoritz> I think that would allow it to become self-hosted
<wasamasa> indeed
<DerGuteMoritz> well, not necessarily the only way
<wasamasa> something clojurescript hasn't managed yet :P
<DerGuteMoritz> but a worthwhile one
<DerGuteMoritz> heh
<wasamasa> the reason why I'm asking is because ever since getting started with emacs I really like starting out in an interpreter first
<wasamasa> which works well enough in `csi` (save some... interesting bugs)
<DerGuteMoritz> an on-the-fly compiler is also an option
<DerGuteMoritz> might be possible to conjure something like that for spock already
<wasamasa> so, if one would keep feeding lines of input into that compiler form, that might suffice?
<DerGuteMoritz> sure
<wasamasa> "eval is not supported."
<DerGuteMoritz> pseudo-js: eval(popen("chicken-spock", "(some-scheme-expression)").read())
<DerGuteMoritz> (also, pseudo chickne-spock interface, no idea whether it can be called like that)
<DerGuteMoritz> *chicken-spock
#+END_SRC

* Linter

- =csc -ASM stoll.scm=
- =csc -debug analyze-only stoll.scm=
- Either combine both kinds of output or figure out how to get line
  numbers into the former

http://wiki.call-cc.org/chicken-internal-structure#the-analysis-database

* Write a dedicated Emacs mode

See http://code.call-cc.org/cgi-bin/gitweb.cgi?p=chicken-core.git;a=blob;f=misc/chicken.el;hb=HEAD

* Experiment with =wlc=

This would allow for writing a tiling window manager for Wayland and Scheme!

* 32C3

- bring switch and cat5 cables
- bring beamer/screen
- bring a stuffed alien/chicken (ente suggested two parentheses as
  sculptures on the ends of the table)
- procedural image/sound generation
- maybe even a dsl for interactive debugging?
- http://youtu.be/s1eNjUgaB-g
- http://youtu.be/rtR63-ecUNo

* Pastebin

- paste.brause.cc
- put a file in a specific location (watched by inotify) and get it
  copied to an uniquely named file
- copy UI from ix.io/sprunge.us (minus the part of line numbers being copyable)
- allow highlighting with language via pygments
- allow highlighting line/range

* GIF

- write giflib C code
- study other wrappers
- write giflib wrapper

* GUI

- https://github.com/vurtun/zahnrad
- this could be cool if it were usable from CHICKEN...
- felix would be interested in any findings and comparisons to, say,
  tcl/tk: http://www.call-with-current-continuation.org/ma

* ZNC

- I'd like having a queriable (SQLite) database
- One approach would be watching files grow and adding their new
  content to it
- The other one to just write a ZNC module logging new stuff into the
  database
- Either way I'd need to deal with old data first
- Once that's done, an UI for querying would be useful, maybe even
  something on the web which supports predefined queries (like,
  highlights, project requests, queries, work stuff, etc.)

* nginx traffic logs

- something is eating up a few gigabytes of transmitted traffic each month
- analysis of logs should allow reconstruction by figuring out file
  sizes and amounts and graphing these

* SRFI-105

- would be cool to have for maths
- not too hard
