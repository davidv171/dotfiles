#+TODO: TODO INPROGRESS | DONE

* Feature wish list for implementation candidates

- Reading from stdin, printing to stdout and reading files
- Loading code from other files or better, a module system
- Regex
- An usable type system or dynamic typing
- User-defined exceptions
- Closures
- Higher-order functions or at least function pointers (functors can
  work, but are yucky)
- Apply
- Records/structs/objects
- Numbers(!), arrays(!!), hash tables (can be faked with arrays)
- Measuring time, alternatively shelling out
- Linux support for the CI to work, alternatively Windows or OS X

* Sources for further languages

- http://rosettacode.org/wiki/Category:Programming_Languages
- https://github.com/mame/quine-relay

* Languages to implement MAL in [5/60]

** DONE Emacs Lisp

That was pretty fun and educational.

** DONE ChucK

A nice audio programming language, with a focus on time.  Incidentally
it appears to have everything needed for implementing MAL in it...

This is harder than expected as it's neither C++ nor Java and not many
people seem to have explored the (buggy) non-audio parts.

** DONE Common Lisp

A serious omission, given the existence of two Scheme (Racket, Guile)
and a Clojure/ClojureScript implementation.

edit: Done by one of my blog readers...

** DONE Powershell

Open-source and running on Linux now!

Considering that the original author of MAL did implement it in Bash,
Powershell should be a piece of cake.

** DONE Picolisp

Alex Burger is a pretty cool guy, so let's see how usable his creation
is...

** TODO Pony

The new cool kid on the block.  It appears to have a significantly
advanced type system and compiler, as well as support for
capability-based programming and actors.

** TODO Rebol / Red

A language proposing DSLs as solution to everything with a syntax
reminiscent of Tcl/Forth.

** TODO Smalltalk

The other alternative to Emacs...  It inspired Ruby.

https://github.com/dubek/mal/tree/smalltalk/smalltalk

** TODO Self

Looks like Smalltalk, but goes for prototypical OO.  It inspired Io
(which already got an implementation).

** TODO eC / Ecere

Like Tcl/Tk, it's mostly interesting due to its graphics support.  The
language itself is reminiscent of C, but has some higher-level
constructs, such as proper module support.  No exceptions or closures
yet.

http://ecere.org/tao.pdf

** TODO FORTRAN

ORLY?

** TODO COBOL

YARLY

** TODO BCPL

C predecessor

** TODO x86 ASM

Because you just hate yourself and deep down, machine code is untyped...

** TODO HLA

Slightly better than x86 ASM, still untyped

** TODO PL/I

RMS likes it!

** TODO REXX

Looks like a Tcl/Smalltalk predecessor...

** TODO SNOBOL / SPITBOL

Made for string processing!

** TODO MUMPS

Got its own series of The Daily WTF posts...

** TODO ALGOL

Revolutionized classic programming syntax or something

** TODO MODULA-2/MODULA-3

A more modern Pascal?

** TODO Pike

I only know that Emacs supports it...

** TODO Dylan

The other way Lisp could have evolved...

** TODO Squeak/Newsqueak

Language used on Apple's Newton hardware.

** TODO J/K/APL/IDL

Yay, array processing.  Somewhat Scheme-inspired.

** TODO Arc, Newlisp

Minimal Lisp dialects that may be different enough from the rest used already.

** TODO CHICKEN

If Guile and Racket made it, why not CHICKEN, too?

** TODO Arrowlisp

Purely symbolic Lisp, so no numbers...

** TODO Felix

http://felix-lang.org/

A powerful inliner compiling procedural/functional ML code to C++

** TODO Pure

Another functional language, uses term rewriting heavily.

http://purelang.bitbucket.org/

** TODO ATS

Formal programming, yey.

** TODO Oz / Mozart

Looks like forcer got paid writing code in it...

** TODO Mercury

Real-world Prolog?

http://www.ats-lang.org/

** TODO Icon

"Icon is a very high-level programming language featuring goal directed execution and many facilities for managing strings and textual patterns."

** TODO Myrddin

C with ADTs?

http://eigenstate.org/myrddin/

** TODO Shadow

...

http://shadow-language.org/

** TODO SuperCollider

The other alternative to ChucK.  Has first-class functions, feels more
like a scripting language and is mostly undocumented.  Fun.

** TODO Luck

C meets FP?

https://luck.subarctic.org/

** TODO L.B. Stanza

Not quite Lisp

http://lbstanza.org/index.html

** TODO Sidef

Pretty

https://github.com/trizen/sidef

** TODO potion

So that's what _why has been doing...

https://github.com/perl11/potion/

** TODO m4

Because TeX isn't insane enough

** TODO spry

smalltalk and rebol on nim, woo

** TODO Solidity

https://solidity.readthedocs.io/en/latest/

Programming on the blockchain?  Crazy shit...

** TODO jq

It might do it, once obstacles like arbitrary IO are sorted out

** TODO XSLT

Welcome to the Turing tarpit!

** TODO Eiffel

Contracts?

** TODO Standard ML

The language that inspired Ocaml.  Not sure which implementation to
pick, there's Mythril, Moscow ML, PolyML, MLton, etc.

** TODO F#

Microsoft has open-sourced tons of things, so that one becomes another
possible Ocaml-like language.

** TODO Yeti

A ML on the JVM

** TODO Clay (2011)

https://github.com/jckarter/clay

System programming language with all the high-level constructs one
wants?  Want.

** TODO Zig

http://ziglang.org/

Another too high-level looking system programming language.  Made by
Mr. libsoundio

** TODO s-lang

http://www.jedsoft.org/slang/doc/html/slang.html

** TODO TypeScript

JavaScript with an actually useful type system.  Makes for better tooling?

** TODO Portable R7RS Scheme

This should support all the required things (jiffies, command
arguments, file IO, modules, etc.), for regex one can vendor irregex?

Make sure to test this with chibi, maybe CHICKEN, Racket and Guile as well...

** TODO Kernel

vau, vau!

** TODO None

https://bitbucket.org/duangle/nonelang/src

Used in http://www.duangle.com/nowhere

See also
http://blog.duangle.com/2015/01/conspire-programming-environment-for.html
and http://blog.duangle.com/2015/04/towards-realtime-deformable-worlds-why.html

** TODO Cobra

http://cobra-language.com/

** TODO Whiley

http://whiley.org/

** TODO Pliant

http://www.fullpliant.org/

* Spin-Off Material

http://blog.felixangell.com/blog/virtual-machine-in-c
