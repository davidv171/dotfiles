#!/usr/bin/env chicken-scheme
;; -*- mode: scheme; -*-

;; TODO: make use of getopt-long to specify verbosity and offer help
(use (only ports with-output-to-port)
     (rename format (format cl-format))
     giflib)

(define (error-message message)
  (with-output-to-port (current-error-port)
    (lambda () (print message)))
  (exit 1))

(define (color->hex color)
  (let ((red (color-red color))
        (green (color-green color))
        (blue (color-blue color)))
    (cl-format #f "#~2,'0x~2,'0x~2,'0x"
               red green blue)))

(define (u8vector->hex u8vector)
  (cl-format #f "~{~2,'0x~}" (u8vector->list u8vector)))

(define (gif-info file-name)
  (print file-name)
  (let ((gif (open-gif file-name)))
    (slurp-gif gif)
    (printf "Dimensions: ~a x ~a\n" (gif-width gif) (gif-height gif))
    (printf "Color resolution: ~a bits\n" (gif-resolution gif))
    (printf "Background color: ~a\n" (gif-bg-index gif))
    (let ((color-map (gif-color-map gif)))
      (if color-map
          (begin
            (printf "Global Color Map:\n")
            (printf "  Count: ~a\n" (color-map-count color-map))
            (printf "  Resolution: ~a\n" (color-map-resolution color-map))
            (printf "  Colors:\n")
            (color-map-for-each-indexed
             (lambda (color i)
               (printf "    Color ~a: ~a\n" i (color->hex color)))
             color-map))
          (printf "Global Color Map: absent\n")))
    (printf "Frames:\n")
    (printf "  Count: ~a\n" (gif-frame-count gif))
    (gif-frame-for-each-indexed
     (lambda (frame i)
       (printf "  Frame ~a:\n" i)
       (printf "    Frame Interlaced: ~a\n" (if (frame-interlaced? frame) "Yes" "No"))
       (printf "    Frame Left: ~a\n" (frame-left frame))
       (printf "    Frame Top: ~a\n" (frame-top frame))
       (printf "    Frame Width: ~a\n" (frame-width frame))
       (printf "    Frame Height: ~a\n" (frame-height frame))
       (let ((color-map (frame-color-map frame)))
         (if color-map
             (begin
               (printf "    Local Color Map:\n")
               (printf "      Count: ~a\n" (color-map-count color-map))
               (printf "      Resolution: ~a\n" (color-map-resolution color-map))
               (printf "      Colors:\n")
               (color-map-for-each-indexed
                (lambda (color i)
                  (printf "        Color ~a: ~a\n" i (color->hex color)))
                color-map))
             (printf "    Local Color Map: absent\n")))
       (printf "    Image Data:\n")
       (let ((width (frame-width frame))
             (height (frame-height frame)))
         (let loop ((y 0))
           (when (< y height)
             (let loop ((x 0))
               (when (< x width)
                 (cl-format #t "~2,'0x" (frame-pixel frame x y))
                 (loop (add1 x))))
             (newline)
             (loop (add1 y)))))
       (let ((extension-block-count (frame-extension-block-count frame)))
         (if (not (zero? extension-block-count))
             (begin
               (printf "    Frame Extension Blocks:\n")
               (printf "      Count: ~a\n" extension-block-count)
               (frame-extension-block-for-each-indexed
                (lambda (extension-block i)
                  (printf "      Extension Block ~a:\n" i)
                  (cond
                   ((sub-block? extension-block)
                    (printf "        Type: Sub Block\n")
                    (printf "        ID: ~a\n" (sub-block-id extension-block))
                    (printf "        Data: ~a\n" (u8vector->hex (sub-block-data extension-block))))
                   ((comment-block? extension-block)
                    (printf "        Type: Comment Block\n")
                    (printf "        Text: ~a\n" (comment-block-text extension-block)))
                   ((graphics-control-block? extension-block)
                    (printf "        Type: Graphics Control Block\n")
                    (printf "        Disposal: ~a\n"
                            (string-titlecase (symbol->string (graphics-control-block-disposal extension-block))))
                    (printf "        User Input: ~a\n"
                            (if (graphics-control-block-user-input? extension-block) "Yes" "No"))
                    (printf "        Delay: ~ams\n"
                            (* (graphics-control-block-delay extension-block) 10))
                    (let ((transparency-index (graphics-control-block-transparency-index extension-block)))
                      (if transparency-index
                          (printf "        Transparency Color: ~a\n" transparency-index)
                          (printf "        Transparency Color: absent\n"))))
                   ((text-block? extension-block)
                    (printf "        Type: Text Block\n")
                    (printf "        Grid Left: ~a\n" (text-block-grid-left extension-block))
                    (printf "        Grid Top: ~a\n" (text-block-grid-top extension-block))
                    (printf "        Grid Width: ~a\n" (text-block-grid-width extension-block))
                    (printf "        Grid Height: ~a\n" (text-block-grid-height extension-block))
                    (printf "        Cell Width: ~a\n" (text-block-cell-width extension-block))
                    (printf "        Cell Height: ~a\n" (text-block-cell-height extension-block))
                    (printf "        Foreground Color: ~a\n" (text-block-fg-index extension-block))
                    (printf "        Background Color: ~a\n" (text-block-bg-index extension-block)))
                   ((application-block? extension-block)
                    (printf "        Type: Application Block\n")
                    (printf "        Identifier: ~a\n" (application-block-identifier extension-block))
                    (printf "        Auth Code: ~a\n" (application-block-auth-code extension-block)))))
                frame))
               (printf "    Frame Extension Blocks: absent\n"))))
     gif)
    (printf "\n")
    (close-gif gif)))

(define (main)
  (if (null? (command-line-arguments))
      (error-message "No input file(s) specified")
      (for-each gif-info (command-line-arguments))))

(main)
