#!/usr/bin/env chicken-scheme

(use (only srfi-1 fold)
     (only srfi-18 thread-sleep!)
     (only srfi-19 format-date current-date)
     (only medea write-json)
     (prefix mpd-client mpd-)
     (only utils read-all)
     format)

(define mpd-connection (mpd-connect))

(define (format-seconds seconds)
  (let* ((time (inexact->exact (round seconds)))
         (minutes (quotient time 60))
         (seconds (remainder time 60)))
    (format "~2,'0d:~2,'0d" minutes seconds)))

(define (format-track-progress elapsed duration)
  (if (and elapsed duration)
      (format "~a/~a" (format-seconds elapsed) (format-seconds duration))
      #f))

(define (mpd-state)
  (let* ((current-status (mpd-get-status mpd-connection))
         (state (alist-ref 'state current-status))
         (playing? (not (equal? 'stop state)))
         (elapsed (alist-ref 'elapsed current-status))
         (current-song (mpd-get-current-song mpd-connection))
         (artist (alist-ref 'Artist current-song))
         (album (alist-ref 'Album current-song))
         (track (alist-ref 'Track current-song))
         (title (alist-ref 'Title current-song))
         (duration (alist-ref 'Time current-song))
         (progress (format-track-progress elapsed duration)))
    `((playing? . ,playing?)
      (artist . ,artist)
      (album . ,album)
      (track . ,track)
      (title . ,title)
      (progress . ,progress))))

(define (mpd-status)
  (let* ((current-status (mpd-get-status mpd-connection))
         (state (alist-ref 'state current-status))
         (elapsed (alist-ref 'elapsed current-status)))
    (if (equal? 'stop state)
        "._."
        (let* ((current-song (mpd-get-current-song mpd-connection))
               (artist (alist-ref 'Artist current-song))
               (album (alist-ref 'Album current-song))
               (track (alist-ref 'Track current-song))
               (title (alist-ref 'Title current-song))
               (duration (alist-ref 'Time current-song)))
          (if album
              (format "~a - [~a #~a] - ~a" artist album track title)
              (format "~a - [~a] - ~a"
                      artist (format-track-progress elapsed duration)
                      title))))))

(define (file-lines path)
  (string-split
   (call-with-input-file path
     (lambda (input) (read-all input))) "\n"))

(define wifi-max-quality 70) ; something magic, driver-specific
(define (wifi-quality)
  (let ((lines (cddr (file-lines "/proc/net/wireless"))))
    (if lines
        (let* ((summary (string-split (car lines)))
               (quality (string->number (list-ref summary 2))))
          (inexact->exact (round (* (/ quality wifi-max-quality) 100))))
        0)))

(define internet-last-download #f)
(define internet-last-upload #f)
(define (internet-speed)
  (let* ((lines (cddr (file-lines "/proc/net/dev")))
         (download-columns
          (map (lambda (line)
                 (string->number (cadr (string-split line)))) lines))
         (downloads (/ (fold + 0 download-columns) 1))
         (download (if internet-last-download
                       (- downloads internet-last-download)
                       0))
         (upload-columns
          (map (lambda (line)
                 (string->number (list-ref (string-split line) 9))) lines))
         (uploads (/ (fold + 0 upload-columns) 1))
         (upload (if internet-last-upload
                     (- uploads internet-last-upload)
                     0)))
    (set! internet-last-download downloads)
    (set! internet-last-upload uploads)
    (cons (/ download 1024) (/ upload 1024))))

(define cpu-count 2)
(define cpu-last-used #f)
(define (cpu-average-percentage)
  (let* ((lines (file-lines "/proc/stat"))
         (summary (cdr (string-split (car lines))))
         (user (string->number (car summary)))
         (nice (string->number (cadr summary)))
         (system (string->number (list-ref summary 2)))
         (used (+ user nice system))
         (percentage (if cpu-last-used
                         (/ (- used cpu-last-used) cpu-count)
                         0))) ;; hack for displaying 0% at beginning
    (set! cpu-last-used used)
    (inexact->exact (round percentage))))

(define (used-ram-percentage)
  (let* ((lines (file-lines "/proc/meminfo"))
         (used (string->number (cadr (string-split (list-ref lines 6)))))
         (available (string->number (cadr (string-split (car lines))))))
    (inexact->exact (round (* (/ used available) 100)))))

;; TODO mark green when full, mark red when critical, mark orange when
;; discharging, mark cyan when charging
;; TODO additionally, make it blink when discharging at a critical
;; status, would be a much better eyecatcher
(define (battery-state)
  (car (file-lines "/sys/class/power_supply/BAT0/status")))
(define (battery-percentage)
  (string->number (car (file-lines "/sys/class/power_supply/BAT0/capacity"))))

(define (current-time)
  (format-date "~H:~M" (current-date)))

(define (preamble)
  (print "{\"version\":1}")
  (print "[")
  (print "[],") ; TODO necessary?
  )

(define (main)
  (preamble)
  (let loop ()
    (let* ((mpd-state (mpd-state))
           (mpd-playing? (alist-ref 'playing? mpd-state))
           (mpd-artist (alist-ref 'artist mpd-state))
           (mpd-album (alist-ref 'album mpd-state))
           (mpd-track (alist-ref 'track mpd-state))
           (mpd-title (alist-ref 'title mpd-state))
           (mpd-progress (alist-ref 'progress mpd-state))
           (wifi (wifi-quality))
           (cpu (cpu-average-percentage))
           (download-upload (internet-speed))
           (download (car download-upload))
           (upload (cdr download-upload))
           (ram (used-ram-percentage))
           (battery (battery-percentage))
           (time (current-time))

           (foreground "#839496")
           (highlight "#eee8d5")
           (purple "#d33682")
           (cyan "#2aa198")
           (green "#859900")
           (orange "#cb4b16")
           (blue "#268bd2")
           (red "#dc322f")
           (violet "#6c71c4")
           (yellow "#b58900"))
      (write-json
       (vector `((full_text . ,(if mpd-playing? "MPD: " "._."))
                 (color . ,purple)
                 ,@(if mpd-playing?
                       '((separator . #f) (separator_block_width . 1))
                       '((separator . #t))))
               `((full_text . ,(if mpd-playing? mpd-artist ""))
                 (color . ,foreground)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(if mpd-playing? " - [" ""))
                 (color . ,highlight)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(if mpd-playing? (or mpd-album mpd-progress) ""))
                 (color . ,foreground)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(if mpd-playing? (if mpd-album " #" "") ""))
                 (color . ,highlight)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(if mpd-playing? (if mpd-album mpd-track "") ""))
                 (color . ,foreground)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(if mpd-playing? "] - " ""))
                 (color . ,highlight)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(if mpd-playing? mpd-title ""))
                 (color . ,foreground))
               `((full_text . "WiFi: ") (color . ,cyan)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(number->string wifi))
                 (color . ,(if (<= wifi 33) red foreground))
                 (separator . #f) (separator_block_width . 1))
               `((full_text . "%") (color . ,foreground))
               `((full_text . "Down: ") (color . ,green)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(format "~,1f" download))
                 (color . ,(if (>= download 500) red foreground)))
               `((full_text . "Up: ") (color . ,orange)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(format "~,1f" upload))
                 (color . ,(if (>= upload 90) red foreground)))
               `((full_text . "CPU: ") (color . ,blue)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(number->string cpu))
                 (color . ,(if (>= cpu 50) red foreground))
                 (separator . #f) (separator_block_width . 1))
               `((full_text . "%") (color . ,foreground))
               `((full_text . "RAM: ") (color . ,red)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(number->string ram))
                 (color . ,(if (>= ram 75) red foreground))
                 (separator . #f) (separator_block_width . 1))
               `((full_text . "%") (color . ,foreground))
               `((full_text . "BAT: ") (color . ,violet)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,(number->string battery))
                 (color . ,(if (<= battery 20) red foreground))
                 (separator . #f) (separator_block_width . 1))
               `((full_text . "%") (color . ,foreground))
               `((full_text . "Time: ") (color . ,yellow)
                 (separator . #f) (separator_block_width . 1))
               `((full_text . ,time) (color . ,foreground))))
      (print ",")
      (flush-output)
      (thread-sleep! 1)
      (loop))))

(main)
